<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAGBgAAAEACADIBgAAJgAAABgYAAABACAAiAkAAO4GAAAoAAAAGAAAADAAAAABAAgAAAAAAKAC
        AAAAAAAAAAAAAAABAAAAAAAAAAAAAP///wDIhCgA/vTcAOTGhgD44rAA+OKyAPrqxAD45rYAwngiAMJ/
        LADoyogA8tqkAPTdpwD13qsA9d+tAPTcqAD1364A9uGwAL1zIQD03KIA/fXjAPPbpAD03KkA9t2rAPbd
        rAD23a0A89ugAPPboQDw158A7sp4ALpxIQDBfy0A6L5kAPrw2wDz2aQA9NupAPLYnQDuyHQA7sh2APHR
        igDYokoA8M2AAO7LeADvy3oA8M18ALlwIwC3axsA8+XIAPHTjwDuyXYA7sl3APDNewC5cCQAuG0iANux
        aQDvyHMA7MVwAOzFcgDtxXIA7cdyAPHNeADGhTIAuXAlALlxJQDsyX0A6sJrAOrBbQDmul4A68RvAOS1
        XAC1aCEA5rhcALVnIAC9dikA7MNrAOm+ZQDpvmYA6b5nAOm/aADktFQAsmYfALRqIwCwYRsA5rZcAOq+
        YADOmUoAtGgiAO7aqwDs0JgA79KUAOe7YADkslAA6LtgAOm9YQDepkoAxoAxALFmIQC0aB8A5MGDAPPe
        sADowGsA4q5MAOW0VADmtVgA5rZZAOa2WwDgqkYA4KhEAOe5XADXnkUA4qxIAK1eGADw16AA47BPAOSz
        UQDks1IA3KI4AOSzUwDktVQA5rhXAK1fHgDepkAArGAbANqsZQDw1Z0A4axKAOKtSwDirk0A4q9NAMyL
        NACsYR8AtGsiAPPdqgDgq0cA4KlFAOCpRgDgqkUA4KpHAOaySwCxaCEA2pwuAKpcGwDcsWoA579rAN2k
        PQDqyG4A3qU+ANiYJgDepUAA2JgoAN6lPwDepj8A4KhBAM2JMQCrXh4AplYYAKlZFwDqzo8AzIYgANqY
        IADcozgA2580ANugNQDboDYA26E3ANyhNwCiVBoA3KE4ANyhOQDdojoA2583AKZZHAClVRUA7dCEANiX
        JgDHgycA2ZstAMeDJQDanC0AyYoqANqcLwDJiisA2p0vANmrVgDanTAA9+rOANqdMQD/+OYA36QzAP/2
        4AClWBsA8d60AKpeHQDUoksA2ZggAMeBJQDYmSYAxX0iANiXJwD/9+kA2JcoAPrrygDZmSgA+eS2ANmZ
        KQDXqlgA2ZopAMWAJgDamyoA0p1KANycKwD89OEA2ZcpAKlbHAD44rEAp1kbAPjjswC5bBwA+eS0AMd9
        HwDGgywA2ZchAO3XqQDYlyEA+u3OANmYIQD34LAA2pkhAPfhsgDUkCEA9+KyAM2IIQD55rkAyH8gAN+3
        bAC9ch0AwnslAK5fHAClWBoA9OfJAKRXGwD34bMAo1UZAPXgrgChUxkA9eCvAKBSGQD24a8AsWMaAPfj
        swCnWhkAv3YjAKBTGQCkVxoA/vflAAAAAPHz8/X19ff5+/319f319fX+AAAAAADYnNrcn6DDw97g4OLi
        5Obo6uzup+8AAADBksPFlK+vx8fHycnJlsvNz9HT1dYAAACtrq+xsbOzjY2NjY21t7e3ubm7vb8AAACd
        nqGio6OjpKSkpaWlpqaoqKmqq6wAAACOj5B1kZGRk5OTk5OVlZeYmHqZmpsAAAAAhIWGbIeHiIiJiWtr
        a4qKim+LjAAAAAAAe3x9fn9mZmZmZoCBgYGBgXOCgwAAAAAAAHBZcXJcc3R2dnZ2dlB3eF95AAAAAAAA
        AABiY2RlZ2hpaWpqVG1VblcAAAAAAAAAAAAAU1ZYWkRbW11dXkhgYQAAAAAAAAAAAAAAAElKS0xNTU5P
        IVFSAAAAAAAAAAAAAAAAAEBBQkNDQ0NDRUZHAAAAAAAAAAAAAAAANjc4OTo6Ozs7PD0+PwAAAAAAAAAA
        AAAALzAxHiYnMjMzMzQpNQAAAAAAAAAAAAAAICIjJCUoKissLC0hLgAAAAAAAAAAAAAAChUWEBcYGRob
        HBQdHwAAAAAAAAAAAAAACv8NDg4PDw8RERIMEwAAAAAAAAAAAAAACvDy9Pb29vj4+PoL/AAAAAAAAAAA
        AAAACd/h4+Xn5+fn5+nr7QAAAAAAAAAAAAAAANLU6dfZ2dnZ2wjdAAAAAAAAAAAAAAAAAMYEyMoFBgbM
        B87QAAAAAAAAAAAAAAAAAACyuLq8A77AwsQAAAAAAAAAAAAAAAAAAAAAsLK0trayAgAAAAAAAAAAAOAA
        DwCAAAMAgAADAIAAAwCAAAMAgAADAMAABwDAAAcA4AAPAPAAHwD4AD8A/AB/APwAfwD4AD8A+AA/APgA
        PwD4AD8A+AA/APgAPwD4AD8A/AB/APwAfwD+AP8A/wH/ACgAAAAYAAAAMAAAAAEAIAAAAAAAYAkAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKVYGwqkVxt4o1UZvaJUGcihUxn/oVMZ/6FTGf+gUhn/sWMa/6da
        Gf+gUxn/oVMZ/6FTGf+gUxnwoVMZt6FUGaqjVhl2pFcaMAAAAAAAAAAAAAAAAAAAAAAAAAAAp1kblqZW
        GP+5bBz/x30f/8yGIP/amCD/2Zgg/9mYIP/ZlyH/2Jch/9iXIf/ZmCH/2Zgh/9qZIf/UkCH/zYgh/8h/
        IP+9ch3/rl8c/6JUGv+lWBqsAAAAAAAAAAAAAAAAql4d/+rIbv/ZmCD/2Jkm/9iYJv/Ylyb/2Jcm/9iX
        J//Ylyf/2Jcn/9iXKP/Ylyj/2Jco/9iYKP/ZmSj/2Zkp/9maKf/amyr/3Jwr/9mXKf+pWxz/AAAAAAAA
        AAAAAAAApVUV/+3QhP/Ylyb/2Zst/9mbLf/anC3/2pwt/9qcLv/anC7/2pwu/9qcLv/anC7/2pwv/9qd
        L//anS//2p0v/9qdMP/anTD/2p0x/9+kM/+lWBv/AAAAAAAAAAAAAAAAqVkX/+rOj//cozj/2580/9ug
        Nf/boDX/26A1/9ugNv/boDb/26A2/9uhN//boTf/26E3/9yhN//coTf/3KE4/9yhOP/coTn/3aI6/9uf
        N/+mWRz/AAAAAAAAAAAAAAAAqlwbuNyxav/nv2v/3KI4/92kPf/dpD3/3aQ9/96lPv/epT7/3qU+/96l
        Pv/epT7/3qVA/96lQP/epT//3qY//96mP//epkD/4KhB/82JMf+rXh65AAAAAAAAAAAAAAAArmQfXLRr
        Iv/z3ar/4KtH/+CoRP/gqUX/4KlF/+CpRv/gqUb/4KpF/+CqRf/gqkb/4KpG/+CqRv/gqkf/4KpH/+Cq
        R//irEj/5rJL/7FoIf+tYh9IAAAAAAAAAAAAAAAAAAAAAKxgG+LarGX/8NWd/+GsSv/irUv/4q5M/+Ku
        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
        PwD8AH8A/gD/AP8B/wA=
</value>
  </data>
</root>